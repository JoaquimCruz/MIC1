// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/10/2025 15:12:41"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MDR
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MDR_vlg_sample_tst(
	CLOCK,
	DATA_IN,
	IN_C,
	LOAD,
	MIR,
	sampler_tx
);
input  CLOCK;
input [31:0] DATA_IN;
input [31:0] IN_C;
input  LOAD;
input [35:0] MIR;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK or DATA_IN or IN_C or LOAD or MIR)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MDR_vlg_check_tst (
	DATA_OUT,
	OUT_B,
	sampler_rx
);
input [31:0] DATA_OUT;
input [31:0] OUT_B;
input sampler_rx;

reg [31:0] DATA_OUT_expected;
reg [31:0] OUT_B_expected;

reg [31:0] DATA_OUT_prev;
reg [31:0] OUT_B_prev;

reg [31:0] DATA_OUT_expected_prev;
reg [31:0] OUT_B_expected_prev;

reg [31:0] last_DATA_OUT_exp;
reg [31:0] last_OUT_B_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	DATA_OUT_prev = DATA_OUT;
	OUT_B_prev = OUT_B;
end

// update expected /o prevs

always @(trigger)
begin
	DATA_OUT_expected_prev = DATA_OUT_expected;
	OUT_B_expected_prev = OUT_B_expected;
end


// expected OUT_B[ 31 ]
initial
begin
	OUT_B_expected[31] = 1'bX;
	OUT_B_expected[31] = #459000 1'b0;
end 
// expected OUT_B[ 30 ]
initial
begin
	OUT_B_expected[30] = 1'bX;
	OUT_B_expected[30] = #459000 1'b0;
end 
// expected OUT_B[ 29 ]
initial
begin
	OUT_B_expected[29] = 1'bX;
	OUT_B_expected[29] = #459000 1'b0;
end 
// expected OUT_B[ 28 ]
initial
begin
	OUT_B_expected[28] = 1'bX;
	OUT_B_expected[28] = #459000 1'b0;
end 
// expected OUT_B[ 27 ]
initial
begin
	OUT_B_expected[27] = 1'bX;
	OUT_B_expected[27] = #459000 1'b0;
end 
// expected OUT_B[ 26 ]
initial
begin
	OUT_B_expected[26] = 1'bX;
	OUT_B_expected[26] = #459000 1'b0;
end 
// expected OUT_B[ 25 ]
initial
begin
	OUT_B_expected[25] = 1'bX;
	OUT_B_expected[25] = #459000 1'b0;
end 
// expected OUT_B[ 24 ]
initial
begin
	OUT_B_expected[24] = 1'bX;
	OUT_B_expected[24] = #459000 1'b0;
end 
// expected OUT_B[ 23 ]
initial
begin
	OUT_B_expected[23] = 1'bX;
	OUT_B_expected[23] = #459000 1'b0;
end 
// expected OUT_B[ 22 ]
initial
begin
	OUT_B_expected[22] = 1'bX;
	OUT_B_expected[22] = #459000 1'b0;
end 
// expected OUT_B[ 21 ]
initial
begin
	OUT_B_expected[21] = 1'bX;
	OUT_B_expected[21] = #459000 1'b0;
end 
// expected OUT_B[ 20 ]
initial
begin
	OUT_B_expected[20] = 1'bX;
	OUT_B_expected[20] = #459000 1'b0;
end 
// expected OUT_B[ 19 ]
initial
begin
	OUT_B_expected[19] = 1'bX;
	OUT_B_expected[19] = #459000 1'b0;
end 
// expected OUT_B[ 18 ]
initial
begin
	OUT_B_expected[18] = 1'bX;
	OUT_B_expected[18] = #459000 1'b0;
end 
// expected OUT_B[ 17 ]
initial
begin
	OUT_B_expected[17] = 1'bX;
	OUT_B_expected[17] = #459000 1'b0;
end 
// expected OUT_B[ 16 ]
initial
begin
	OUT_B_expected[16] = 1'bX;
	OUT_B_expected[16] = #459000 1'b0;
end 
// expected OUT_B[ 15 ]
initial
begin
	OUT_B_expected[15] = 1'bX;
	OUT_B_expected[15] = #459000 1'b0;
end 
// expected OUT_B[ 14 ]
initial
begin
	OUT_B_expected[14] = 1'bX;
	OUT_B_expected[14] = #459000 1'b0;
end 
// expected OUT_B[ 13 ]
initial
begin
	OUT_B_expected[13] = 1'bX;
	OUT_B_expected[13] = #459000 1'b0;
end 
// expected OUT_B[ 12 ]
initial
begin
	OUT_B_expected[12] = 1'bX;
	OUT_B_expected[12] = #459000 1'b0;
end 
// expected OUT_B[ 11 ]
initial
begin
	OUT_B_expected[11] = 1'bX;
	OUT_B_expected[11] = #459000 1'b0;
end 
// expected OUT_B[ 10 ]
initial
begin
	OUT_B_expected[10] = 1'bX;
	OUT_B_expected[10] = #459000 1'b0;
end 
// expected OUT_B[ 9 ]
initial
begin
	OUT_B_expected[9] = 1'bX;
	OUT_B_expected[9] = #459000 1'b0;
end 
// expected OUT_B[ 8 ]
initial
begin
	OUT_B_expected[8] = 1'bX;
	OUT_B_expected[8] = #459000 1'b0;
end 
// expected OUT_B[ 7 ]
initial
begin
	OUT_B_expected[7] = 1'bX;
	OUT_B_expected[7] = #459000 1'b0;
end 
// expected OUT_B[ 6 ]
initial
begin
	OUT_B_expected[6] = 1'bX;
	OUT_B_expected[6] = #459000 1'b0;
end 
// expected OUT_B[ 5 ]
initial
begin
	OUT_B_expected[5] = 1'bX;
	OUT_B_expected[5] = #459000 1'b0;
end 
// expected OUT_B[ 4 ]
initial
begin
	OUT_B_expected[4] = 1'bX;
	OUT_B_expected[4] = #459000 1'b0;
end 
// expected OUT_B[ 3 ]
initial
begin
	OUT_B_expected[3] = 1'bX;
	OUT_B_expected[3] = #459000 1'b0;
end 
// expected OUT_B[ 2 ]
initial
begin
	OUT_B_expected[2] = 1'bX;
	OUT_B_expected[2] = #459000 1'b0;
end 
// expected OUT_B[ 1 ]
initial
begin
	OUT_B_expected[1] = 1'bX;
	OUT_B_expected[1] = #459000 1'b0;
end 
// expected OUT_B[ 0 ]
initial
begin
	OUT_B_expected[0] = 1'bX;
	OUT_B_expected[0] = #459000 1'b0;
end 
// expected DATA_OUT[ 31 ]
initial
begin
	DATA_OUT_expected[31] = 1'bX;
end 
// expected DATA_OUT[ 30 ]
initial
begin
	DATA_OUT_expected[30] = 1'bX;
end 
// expected DATA_OUT[ 29 ]
initial
begin
	DATA_OUT_expected[29] = 1'bX;
end 
// expected DATA_OUT[ 28 ]
initial
begin
	DATA_OUT_expected[28] = 1'bX;
end 
// expected DATA_OUT[ 27 ]
initial
begin
	DATA_OUT_expected[27] = 1'bX;
end 
// expected DATA_OUT[ 26 ]
initial
begin
	DATA_OUT_expected[26] = 1'bX;
end 
// expected DATA_OUT[ 25 ]
initial
begin
	DATA_OUT_expected[25] = 1'bX;
end 
// expected DATA_OUT[ 24 ]
initial
begin
	DATA_OUT_expected[24] = 1'bX;
end 
// expected DATA_OUT[ 23 ]
initial
begin
	DATA_OUT_expected[23] = 1'bX;
end 
// expected DATA_OUT[ 22 ]
initial
begin
	DATA_OUT_expected[22] = 1'bX;
end 
// expected DATA_OUT[ 21 ]
initial
begin
	DATA_OUT_expected[21] = 1'bX;
end 
// expected DATA_OUT[ 20 ]
initial
begin
	DATA_OUT_expected[20] = 1'bX;
end 
// expected DATA_OUT[ 19 ]
initial
begin
	DATA_OUT_expected[19] = 1'bX;
end 
// expected DATA_OUT[ 18 ]
initial
begin
	DATA_OUT_expected[18] = 1'bX;
end 
// expected DATA_OUT[ 17 ]
initial
begin
	DATA_OUT_expected[17] = 1'bX;
end 
// expected DATA_OUT[ 16 ]
initial
begin
	DATA_OUT_expected[16] = 1'bX;
end 
// expected DATA_OUT[ 15 ]
initial
begin
	DATA_OUT_expected[15] = 1'bX;
end 
// expected DATA_OUT[ 14 ]
initial
begin
	DATA_OUT_expected[14] = 1'bX;
end 
// expected DATA_OUT[ 13 ]
initial
begin
	DATA_OUT_expected[13] = 1'bX;
end 
// expected DATA_OUT[ 12 ]
initial
begin
	DATA_OUT_expected[12] = 1'bX;
end 
// expected DATA_OUT[ 11 ]
initial
begin
	DATA_OUT_expected[11] = 1'bX;
end 
// expected DATA_OUT[ 10 ]
initial
begin
	DATA_OUT_expected[10] = 1'bX;
end 
// expected DATA_OUT[ 9 ]
initial
begin
	DATA_OUT_expected[9] = 1'bX;
end 
// expected DATA_OUT[ 8 ]
initial
begin
	DATA_OUT_expected[8] = 1'bX;
end 
// expected DATA_OUT[ 7 ]
initial
begin
	DATA_OUT_expected[7] = 1'bX;
end 
// expected DATA_OUT[ 6 ]
initial
begin
	DATA_OUT_expected[6] = 1'bX;
end 
// expected DATA_OUT[ 5 ]
initial
begin
	DATA_OUT_expected[5] = 1'bX;
end 
// expected DATA_OUT[ 4 ]
initial
begin
	DATA_OUT_expected[4] = 1'bX;
end 
// expected DATA_OUT[ 3 ]
initial
begin
	DATA_OUT_expected[3] = 1'bX;
end 
// expected DATA_OUT[ 2 ]
initial
begin
	DATA_OUT_expected[2] = 1'bX;
end 
// expected DATA_OUT[ 1 ]
initial
begin
	DATA_OUT_expected[1] = 1'bX;
end 
// expected DATA_OUT[ 0 ]
initial
begin
	DATA_OUT_expected[0] = 1'bX;
end 
// generate trigger
always @(DATA_OUT_expected or DATA_OUT or OUT_B_expected or OUT_B)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DATA_OUT = %b | expected OUT_B = %b | ",DATA_OUT_expected_prev,OUT_B_expected_prev);
	$display("| real DATA_OUT = %b | real OUT_B = %b | ",DATA_OUT_prev,OUT_B_prev);
`endif
	if (
		( DATA_OUT_expected_prev[0] !== 1'bx ) && ( DATA_OUT_prev[0] !== DATA_OUT_expected_prev[0] )
		&& ((DATA_OUT_expected_prev[0] !== last_DATA_OUT_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[0] = DATA_OUT_expected_prev[0];
	end
	if (
		( DATA_OUT_expected_prev[1] !== 1'bx ) && ( DATA_OUT_prev[1] !== DATA_OUT_expected_prev[1] )
		&& ((DATA_OUT_expected_prev[1] !== last_DATA_OUT_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[1] = DATA_OUT_expected_prev[1];
	end
	if (
		( DATA_OUT_expected_prev[2] !== 1'bx ) && ( DATA_OUT_prev[2] !== DATA_OUT_expected_prev[2] )
		&& ((DATA_OUT_expected_prev[2] !== last_DATA_OUT_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[2] = DATA_OUT_expected_prev[2];
	end
	if (
		( DATA_OUT_expected_prev[3] !== 1'bx ) && ( DATA_OUT_prev[3] !== DATA_OUT_expected_prev[3] )
		&& ((DATA_OUT_expected_prev[3] !== last_DATA_OUT_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[3] = DATA_OUT_expected_prev[3];
	end
	if (
		( DATA_OUT_expected_prev[4] !== 1'bx ) && ( DATA_OUT_prev[4] !== DATA_OUT_expected_prev[4] )
		&& ((DATA_OUT_expected_prev[4] !== last_DATA_OUT_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[4] = DATA_OUT_expected_prev[4];
	end
	if (
		( DATA_OUT_expected_prev[5] !== 1'bx ) && ( DATA_OUT_prev[5] !== DATA_OUT_expected_prev[5] )
		&& ((DATA_OUT_expected_prev[5] !== last_DATA_OUT_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[5] = DATA_OUT_expected_prev[5];
	end
	if (
		( DATA_OUT_expected_prev[6] !== 1'bx ) && ( DATA_OUT_prev[6] !== DATA_OUT_expected_prev[6] )
		&& ((DATA_OUT_expected_prev[6] !== last_DATA_OUT_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[6] = DATA_OUT_expected_prev[6];
	end
	if (
		( DATA_OUT_expected_prev[7] !== 1'bx ) && ( DATA_OUT_prev[7] !== DATA_OUT_expected_prev[7] )
		&& ((DATA_OUT_expected_prev[7] !== last_DATA_OUT_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[7] = DATA_OUT_expected_prev[7];
	end
	if (
		( DATA_OUT_expected_prev[8] !== 1'bx ) && ( DATA_OUT_prev[8] !== DATA_OUT_expected_prev[8] )
		&& ((DATA_OUT_expected_prev[8] !== last_DATA_OUT_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[8] = DATA_OUT_expected_prev[8];
	end
	if (
		( DATA_OUT_expected_prev[9] !== 1'bx ) && ( DATA_OUT_prev[9] !== DATA_OUT_expected_prev[9] )
		&& ((DATA_OUT_expected_prev[9] !== last_DATA_OUT_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[9] = DATA_OUT_expected_prev[9];
	end
	if (
		( DATA_OUT_expected_prev[10] !== 1'bx ) && ( DATA_OUT_prev[10] !== DATA_OUT_expected_prev[10] )
		&& ((DATA_OUT_expected_prev[10] !== last_DATA_OUT_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[10] = DATA_OUT_expected_prev[10];
	end
	if (
		( DATA_OUT_expected_prev[11] !== 1'bx ) && ( DATA_OUT_prev[11] !== DATA_OUT_expected_prev[11] )
		&& ((DATA_OUT_expected_prev[11] !== last_DATA_OUT_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[11] = DATA_OUT_expected_prev[11];
	end
	if (
		( DATA_OUT_expected_prev[12] !== 1'bx ) && ( DATA_OUT_prev[12] !== DATA_OUT_expected_prev[12] )
		&& ((DATA_OUT_expected_prev[12] !== last_DATA_OUT_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[12] = DATA_OUT_expected_prev[12];
	end
	if (
		( DATA_OUT_expected_prev[13] !== 1'bx ) && ( DATA_OUT_prev[13] !== DATA_OUT_expected_prev[13] )
		&& ((DATA_OUT_expected_prev[13] !== last_DATA_OUT_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[13] = DATA_OUT_expected_prev[13];
	end
	if (
		( DATA_OUT_expected_prev[14] !== 1'bx ) && ( DATA_OUT_prev[14] !== DATA_OUT_expected_prev[14] )
		&& ((DATA_OUT_expected_prev[14] !== last_DATA_OUT_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[14] = DATA_OUT_expected_prev[14];
	end
	if (
		( DATA_OUT_expected_prev[15] !== 1'bx ) && ( DATA_OUT_prev[15] !== DATA_OUT_expected_prev[15] )
		&& ((DATA_OUT_expected_prev[15] !== last_DATA_OUT_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[15] = DATA_OUT_expected_prev[15];
	end
	if (
		( DATA_OUT_expected_prev[16] !== 1'bx ) && ( DATA_OUT_prev[16] !== DATA_OUT_expected_prev[16] )
		&& ((DATA_OUT_expected_prev[16] !== last_DATA_OUT_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[16] = DATA_OUT_expected_prev[16];
	end
	if (
		( DATA_OUT_expected_prev[17] !== 1'bx ) && ( DATA_OUT_prev[17] !== DATA_OUT_expected_prev[17] )
		&& ((DATA_OUT_expected_prev[17] !== last_DATA_OUT_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[17] = DATA_OUT_expected_prev[17];
	end
	if (
		( DATA_OUT_expected_prev[18] !== 1'bx ) && ( DATA_OUT_prev[18] !== DATA_OUT_expected_prev[18] )
		&& ((DATA_OUT_expected_prev[18] !== last_DATA_OUT_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[18] = DATA_OUT_expected_prev[18];
	end
	if (
		( DATA_OUT_expected_prev[19] !== 1'bx ) && ( DATA_OUT_prev[19] !== DATA_OUT_expected_prev[19] )
		&& ((DATA_OUT_expected_prev[19] !== last_DATA_OUT_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[19] = DATA_OUT_expected_prev[19];
	end
	if (
		( DATA_OUT_expected_prev[20] !== 1'bx ) && ( DATA_OUT_prev[20] !== DATA_OUT_expected_prev[20] )
		&& ((DATA_OUT_expected_prev[20] !== last_DATA_OUT_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[20] = DATA_OUT_expected_prev[20];
	end
	if (
		( DATA_OUT_expected_prev[21] !== 1'bx ) && ( DATA_OUT_prev[21] !== DATA_OUT_expected_prev[21] )
		&& ((DATA_OUT_expected_prev[21] !== last_DATA_OUT_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[21] = DATA_OUT_expected_prev[21];
	end
	if (
		( DATA_OUT_expected_prev[22] !== 1'bx ) && ( DATA_OUT_prev[22] !== DATA_OUT_expected_prev[22] )
		&& ((DATA_OUT_expected_prev[22] !== last_DATA_OUT_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[22] = DATA_OUT_expected_prev[22];
	end
	if (
		( DATA_OUT_expected_prev[23] !== 1'bx ) && ( DATA_OUT_prev[23] !== DATA_OUT_expected_prev[23] )
		&& ((DATA_OUT_expected_prev[23] !== last_DATA_OUT_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[23] = DATA_OUT_expected_prev[23];
	end
	if (
		( DATA_OUT_expected_prev[24] !== 1'bx ) && ( DATA_OUT_prev[24] !== DATA_OUT_expected_prev[24] )
		&& ((DATA_OUT_expected_prev[24] !== last_DATA_OUT_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[24] = DATA_OUT_expected_prev[24];
	end
	if (
		( DATA_OUT_expected_prev[25] !== 1'bx ) && ( DATA_OUT_prev[25] !== DATA_OUT_expected_prev[25] )
		&& ((DATA_OUT_expected_prev[25] !== last_DATA_OUT_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[25] = DATA_OUT_expected_prev[25];
	end
	if (
		( DATA_OUT_expected_prev[26] !== 1'bx ) && ( DATA_OUT_prev[26] !== DATA_OUT_expected_prev[26] )
		&& ((DATA_OUT_expected_prev[26] !== last_DATA_OUT_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[26] = DATA_OUT_expected_prev[26];
	end
	if (
		( DATA_OUT_expected_prev[27] !== 1'bx ) && ( DATA_OUT_prev[27] !== DATA_OUT_expected_prev[27] )
		&& ((DATA_OUT_expected_prev[27] !== last_DATA_OUT_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[27] = DATA_OUT_expected_prev[27];
	end
	if (
		( DATA_OUT_expected_prev[28] !== 1'bx ) && ( DATA_OUT_prev[28] !== DATA_OUT_expected_prev[28] )
		&& ((DATA_OUT_expected_prev[28] !== last_DATA_OUT_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[28] = DATA_OUT_expected_prev[28];
	end
	if (
		( DATA_OUT_expected_prev[29] !== 1'bx ) && ( DATA_OUT_prev[29] !== DATA_OUT_expected_prev[29] )
		&& ((DATA_OUT_expected_prev[29] !== last_DATA_OUT_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[29] = DATA_OUT_expected_prev[29];
	end
	if (
		( DATA_OUT_expected_prev[30] !== 1'bx ) && ( DATA_OUT_prev[30] !== DATA_OUT_expected_prev[30] )
		&& ((DATA_OUT_expected_prev[30] !== last_DATA_OUT_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[30] = DATA_OUT_expected_prev[30];
	end
	if (
		( DATA_OUT_expected_prev[31] !== 1'bx ) && ( DATA_OUT_prev[31] !== DATA_OUT_expected_prev[31] )
		&& ((DATA_OUT_expected_prev[31] !== last_DATA_OUT_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[31] = DATA_OUT_expected_prev[31];
	end
	if (
		( OUT_B_expected_prev[0] !== 1'bx ) && ( OUT_B_prev[0] !== OUT_B_expected_prev[0] )
		&& ((OUT_B_expected_prev[0] !== last_OUT_B_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_B[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_B_expected_prev);
		$display ("     Real value = %b", OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_B_exp[0] = OUT_B_expected_prev[0];
	end
	if (
		( OUT_B_expected_prev[1] !== 1'bx ) && ( OUT_B_prev[1] !== OUT_B_expected_prev[1] )
		&& ((OUT_B_expected_prev[1] !== last_OUT_B_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_B[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_B_expected_prev);
		$display ("     Real value = %b", OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_B_exp[1] = OUT_B_expected_prev[1];
	end
	if (
		( OUT_B_expected_prev[2] !== 1'bx ) && ( OUT_B_prev[2] !== OUT_B_expected_prev[2] )
		&& ((OUT_B_expected_prev[2] !== last_OUT_B_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_B[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_B_expected_prev);
		$display ("     Real value = %b", OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_B_exp[2] = OUT_B_expected_prev[2];
	end
	if (
		( OUT_B_expected_prev[3] !== 1'bx ) && ( OUT_B_prev[3] !== OUT_B_expected_prev[3] )
		&& ((OUT_B_expected_prev[3] !== last_OUT_B_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_B[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_B_expected_prev);
		$display ("     Real value = %b", OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_B_exp[3] = OUT_B_expected_prev[3];
	end
	if (
		( OUT_B_expected_prev[4] !== 1'bx ) && ( OUT_B_prev[4] !== OUT_B_expected_prev[4] )
		&& ((OUT_B_expected_prev[4] !== last_OUT_B_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_B[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_B_expected_prev);
		$display ("     Real value = %b", OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_B_exp[4] = OUT_B_expected_prev[4];
	end
	if (
		( OUT_B_expected_prev[5] !== 1'bx ) && ( OUT_B_prev[5] !== OUT_B_expected_prev[5] )
		&& ((OUT_B_expected_prev[5] !== last_OUT_B_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_B[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_B_expected_prev);
		$display ("     Real value = %b", OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_B_exp[5] = OUT_B_expected_prev[5];
	end
	if (
		( OUT_B_expected_prev[6] !== 1'bx ) && ( OUT_B_prev[6] !== OUT_B_expected_prev[6] )
		&& ((OUT_B_expected_prev[6] !== last_OUT_B_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_B[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_B_expected_prev);
		$display ("     Real value = %b", OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_B_exp[6] = OUT_B_expected_prev[6];
	end
	if (
		( OUT_B_expected_prev[7] !== 1'bx ) && ( OUT_B_prev[7] !== OUT_B_expected_prev[7] )
		&& ((OUT_B_expected_prev[7] !== last_OUT_B_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_B[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_B_expected_prev);
		$display ("     Real value = %b", OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_B_exp[7] = OUT_B_expected_prev[7];
	end
	if (
		( OUT_B_expected_prev[8] !== 1'bx ) && ( OUT_B_prev[8] !== OUT_B_expected_prev[8] )
		&& ((OUT_B_expected_prev[8] !== last_OUT_B_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_B[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_B_expected_prev);
		$display ("     Real value = %b", OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_B_exp[8] = OUT_B_expected_prev[8];
	end
	if (
		( OUT_B_expected_prev[9] !== 1'bx ) && ( OUT_B_prev[9] !== OUT_B_expected_prev[9] )
		&& ((OUT_B_expected_prev[9] !== last_OUT_B_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_B[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_B_expected_prev);
		$display ("     Real value = %b", OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_B_exp[9] = OUT_B_expected_prev[9];
	end
	if (
		( OUT_B_expected_prev[10] !== 1'bx ) && ( OUT_B_prev[10] !== OUT_B_expected_prev[10] )
		&& ((OUT_B_expected_prev[10] !== last_OUT_B_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_B[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_B_expected_prev);
		$display ("     Real value = %b", OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_B_exp[10] = OUT_B_expected_prev[10];
	end
	if (
		( OUT_B_expected_prev[11] !== 1'bx ) && ( OUT_B_prev[11] !== OUT_B_expected_prev[11] )
		&& ((OUT_B_expected_prev[11] !== last_OUT_B_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_B[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_B_expected_prev);
		$display ("     Real value = %b", OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_B_exp[11] = OUT_B_expected_prev[11];
	end
	if (
		( OUT_B_expected_prev[12] !== 1'bx ) && ( OUT_B_prev[12] !== OUT_B_expected_prev[12] )
		&& ((OUT_B_expected_prev[12] !== last_OUT_B_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_B[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_B_expected_prev);
		$display ("     Real value = %b", OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_B_exp[12] = OUT_B_expected_prev[12];
	end
	if (
		( OUT_B_expected_prev[13] !== 1'bx ) && ( OUT_B_prev[13] !== OUT_B_expected_prev[13] )
		&& ((OUT_B_expected_prev[13] !== last_OUT_B_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_B[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_B_expected_prev);
		$display ("     Real value = %b", OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_B_exp[13] = OUT_B_expected_prev[13];
	end
	if (
		( OUT_B_expected_prev[14] !== 1'bx ) && ( OUT_B_prev[14] !== OUT_B_expected_prev[14] )
		&& ((OUT_B_expected_prev[14] !== last_OUT_B_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_B[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_B_expected_prev);
		$display ("     Real value = %b", OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_B_exp[14] = OUT_B_expected_prev[14];
	end
	if (
		( OUT_B_expected_prev[15] !== 1'bx ) && ( OUT_B_prev[15] !== OUT_B_expected_prev[15] )
		&& ((OUT_B_expected_prev[15] !== last_OUT_B_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_B[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_B_expected_prev);
		$display ("     Real value = %b", OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_B_exp[15] = OUT_B_expected_prev[15];
	end
	if (
		( OUT_B_expected_prev[16] !== 1'bx ) && ( OUT_B_prev[16] !== OUT_B_expected_prev[16] )
		&& ((OUT_B_expected_prev[16] !== last_OUT_B_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_B[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_B_expected_prev);
		$display ("     Real value = %b", OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_B_exp[16] = OUT_B_expected_prev[16];
	end
	if (
		( OUT_B_expected_prev[17] !== 1'bx ) && ( OUT_B_prev[17] !== OUT_B_expected_prev[17] )
		&& ((OUT_B_expected_prev[17] !== last_OUT_B_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_B[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_B_expected_prev);
		$display ("     Real value = %b", OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_B_exp[17] = OUT_B_expected_prev[17];
	end
	if (
		( OUT_B_expected_prev[18] !== 1'bx ) && ( OUT_B_prev[18] !== OUT_B_expected_prev[18] )
		&& ((OUT_B_expected_prev[18] !== last_OUT_B_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_B[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_B_expected_prev);
		$display ("     Real value = %b", OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_B_exp[18] = OUT_B_expected_prev[18];
	end
	if (
		( OUT_B_expected_prev[19] !== 1'bx ) && ( OUT_B_prev[19] !== OUT_B_expected_prev[19] )
		&& ((OUT_B_expected_prev[19] !== last_OUT_B_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_B[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_B_expected_prev);
		$display ("     Real value = %b", OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_B_exp[19] = OUT_B_expected_prev[19];
	end
	if (
		( OUT_B_expected_prev[20] !== 1'bx ) && ( OUT_B_prev[20] !== OUT_B_expected_prev[20] )
		&& ((OUT_B_expected_prev[20] !== last_OUT_B_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_B[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_B_expected_prev);
		$display ("     Real value = %b", OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_B_exp[20] = OUT_B_expected_prev[20];
	end
	if (
		( OUT_B_expected_prev[21] !== 1'bx ) && ( OUT_B_prev[21] !== OUT_B_expected_prev[21] )
		&& ((OUT_B_expected_prev[21] !== last_OUT_B_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_B[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_B_expected_prev);
		$display ("     Real value = %b", OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_B_exp[21] = OUT_B_expected_prev[21];
	end
	if (
		( OUT_B_expected_prev[22] !== 1'bx ) && ( OUT_B_prev[22] !== OUT_B_expected_prev[22] )
		&& ((OUT_B_expected_prev[22] !== last_OUT_B_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_B[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_B_expected_prev);
		$display ("     Real value = %b", OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_B_exp[22] = OUT_B_expected_prev[22];
	end
	if (
		( OUT_B_expected_prev[23] !== 1'bx ) && ( OUT_B_prev[23] !== OUT_B_expected_prev[23] )
		&& ((OUT_B_expected_prev[23] !== last_OUT_B_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_B[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_B_expected_prev);
		$display ("     Real value = %b", OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_B_exp[23] = OUT_B_expected_prev[23];
	end
	if (
		( OUT_B_expected_prev[24] !== 1'bx ) && ( OUT_B_prev[24] !== OUT_B_expected_prev[24] )
		&& ((OUT_B_expected_prev[24] !== last_OUT_B_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_B[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_B_expected_prev);
		$display ("     Real value = %b", OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_B_exp[24] = OUT_B_expected_prev[24];
	end
	if (
		( OUT_B_expected_prev[25] !== 1'bx ) && ( OUT_B_prev[25] !== OUT_B_expected_prev[25] )
		&& ((OUT_B_expected_prev[25] !== last_OUT_B_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_B[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_B_expected_prev);
		$display ("     Real value = %b", OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_B_exp[25] = OUT_B_expected_prev[25];
	end
	if (
		( OUT_B_expected_prev[26] !== 1'bx ) && ( OUT_B_prev[26] !== OUT_B_expected_prev[26] )
		&& ((OUT_B_expected_prev[26] !== last_OUT_B_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_B[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_B_expected_prev);
		$display ("     Real value = %b", OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_B_exp[26] = OUT_B_expected_prev[26];
	end
	if (
		( OUT_B_expected_prev[27] !== 1'bx ) && ( OUT_B_prev[27] !== OUT_B_expected_prev[27] )
		&& ((OUT_B_expected_prev[27] !== last_OUT_B_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_B[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_B_expected_prev);
		$display ("     Real value = %b", OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_B_exp[27] = OUT_B_expected_prev[27];
	end
	if (
		( OUT_B_expected_prev[28] !== 1'bx ) && ( OUT_B_prev[28] !== OUT_B_expected_prev[28] )
		&& ((OUT_B_expected_prev[28] !== last_OUT_B_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_B[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_B_expected_prev);
		$display ("     Real value = %b", OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_B_exp[28] = OUT_B_expected_prev[28];
	end
	if (
		( OUT_B_expected_prev[29] !== 1'bx ) && ( OUT_B_prev[29] !== OUT_B_expected_prev[29] )
		&& ((OUT_B_expected_prev[29] !== last_OUT_B_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_B[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_B_expected_prev);
		$display ("     Real value = %b", OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_B_exp[29] = OUT_B_expected_prev[29];
	end
	if (
		( OUT_B_expected_prev[30] !== 1'bx ) && ( OUT_B_prev[30] !== OUT_B_expected_prev[30] )
		&& ((OUT_B_expected_prev[30] !== last_OUT_B_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_B[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_B_expected_prev);
		$display ("     Real value = %b", OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_B_exp[30] = OUT_B_expected_prev[30];
	end
	if (
		( OUT_B_expected_prev[31] !== 1'bx ) && ( OUT_B_prev[31] !== OUT_B_expected_prev[31] )
		&& ((OUT_B_expected_prev[31] !== last_OUT_B_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_B[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_B_expected_prev);
		$display ("     Real value = %b", OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_B_exp[31] = OUT_B_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#540000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module MDR_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg [31:0] DATA_IN;
reg [31:0] IN_C;
reg LOAD;
reg [35:0] MIR;
// wires                                               
wire [31:0] DATA_OUT;
wire [31:0] OUT_B;

wire sampler;                             

// assign statements (if any)                          
MDR i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK(CLOCK),
	.DATA_IN(DATA_IN),
	.DATA_OUT(DATA_OUT),
	.IN_C(IN_C),
	.LOAD(LOAD),
	.MIR(MIR),
	.OUT_B(OUT_B)
);

// CLOCK
initial
begin
	repeat(6)
	begin
		CLOCK = 1'b0;
		CLOCK = #60000 1'b1;
		# 20000;
	end
	CLOCK = 1'b0;
end 
// IN_C[ 31 ]
initial
begin
	IN_C[31] = 1'b1;
	IN_C[31] = #459000 1'b0;
end 
// IN_C[ 30 ]
initial
begin
	IN_C[30] = 1'b0;
end 
// IN_C[ 29 ]
initial
begin
	IN_C[29] = 1'b0;
end 
// IN_C[ 28 ]
initial
begin
	IN_C[28] = 1'b1;
	IN_C[28] = #459000 1'b0;
end 
// IN_C[ 27 ]
initial
begin
	IN_C[27] = 1'b1;
	IN_C[27] = #459000 1'b0;
end 
// IN_C[ 26 ]
initial
begin
	IN_C[26] = 1'b0;
end 
// IN_C[ 25 ]
initial
begin
	IN_C[25] = 1'b1;
	IN_C[25] = #459000 1'b0;
end 
// IN_C[ 24 ]
initial
begin
	IN_C[24] = 1'b1;
	IN_C[24] = #459000 1'b0;
end 
// IN_C[ 23 ]
initial
begin
	IN_C[23] = 1'b1;
	IN_C[23] = #459000 1'b0;
end 
// IN_C[ 22 ]
initial
begin
	IN_C[22] = 1'b0;
end 
// IN_C[ 21 ]
initial
begin
	IN_C[21] = 1'b0;
end 
// IN_C[ 20 ]
initial
begin
	IN_C[20] = 1'b1;
	IN_C[20] = #459000 1'b0;
end 
// IN_C[ 19 ]
initial
begin
	IN_C[19] = 1'b1;
	IN_C[19] = #459000 1'b0;
end 
// IN_C[ 18 ]
initial
begin
	IN_C[18] = 1'b0;
end 
// IN_C[ 17 ]
initial
begin
	IN_C[17] = 1'b1;
	IN_C[17] = #459000 1'b0;
end 
// IN_C[ 16 ]
initial
begin
	IN_C[16] = 1'b1;
	IN_C[16] = #459000 1'b0;
end 
// IN_C[ 15 ]
initial
begin
	IN_C[15] = 1'b1;
	IN_C[15] = #459000 1'b0;
end 
// IN_C[ 14 ]
initial
begin
	IN_C[14] = 1'b0;
end 
// IN_C[ 13 ]
initial
begin
	IN_C[13] = 1'b1;
	IN_C[13] = #459000 1'b0;
end 
// IN_C[ 12 ]
initial
begin
	IN_C[12] = 1'b1;
	IN_C[12] = #459000 1'b0;
end 
// IN_C[ 11 ]
initial
begin
	IN_C[11] = 1'b1;
	IN_C[11] = #459000 1'b0;
end 
// IN_C[ 10 ]
initial
begin
	IN_C[10] = 1'b0;
end 
// IN_C[ 9 ]
initial
begin
	IN_C[9] = 1'b0;
end 
// IN_C[ 8 ]
initial
begin
	IN_C[8] = 1'b1;
	IN_C[8] = #459000 1'b0;
end 
// IN_C[ 7 ]
initial
begin
	IN_C[7] = 1'b1;
	IN_C[7] = #459000 1'b0;
end 
// IN_C[ 6 ]
initial
begin
	IN_C[6] = 1'b0;
end 
// IN_C[ 5 ]
initial
begin
	IN_C[5] = 1'b1;
	IN_C[5] = #459000 1'b0;
end 
// IN_C[ 4 ]
initial
begin
	IN_C[4] = 1'b1;
	IN_C[4] = #459000 1'b0;
end 
// IN_C[ 3 ]
initial
begin
	IN_C[3] = 1'b1;
	IN_C[3] = #459000 1'b0;
end 
// IN_C[ 2 ]
initial
begin
	IN_C[2] = 1'b0;
end 
// IN_C[ 1 ]
initial
begin
	IN_C[1] = 1'b0;
end 
// IN_C[ 0 ]
initial
begin
	IN_C[0] = 1'b1;
	IN_C[0] = #459000 1'b0;
end 
// DATA_IN[ 31 ]
initial
begin
	DATA_IN[31] = 1'b1;
end 
// DATA_IN[ 30 ]
initial
begin
	DATA_IN[30] = 1'b0;
end 
// DATA_IN[ 29 ]
initial
begin
	DATA_IN[29] = 1'b1;
end 
// DATA_IN[ 28 ]
initial
begin
	DATA_IN[28] = 1'b0;
end 
// DATA_IN[ 27 ]
initial
begin
	DATA_IN[27] = 1'b0;
end 
// DATA_IN[ 26 ]
initial
begin
	DATA_IN[26] = 1'b1;
end 
// DATA_IN[ 25 ]
initial
begin
	DATA_IN[25] = 1'b0;
end 
// DATA_IN[ 24 ]
initial
begin
	DATA_IN[24] = 1'b1;
end 
// DATA_IN[ 23 ]
initial
begin
	DATA_IN[23] = 1'b1;
end 
// DATA_IN[ 22 ]
initial
begin
	DATA_IN[22] = 1'b0;
end 
// DATA_IN[ 21 ]
initial
begin
	DATA_IN[21] = 1'b1;
end 
// DATA_IN[ 20 ]
initial
begin
	DATA_IN[20] = 1'b0;
end 
// DATA_IN[ 19 ]
initial
begin
	DATA_IN[19] = 1'b0;
end 
// DATA_IN[ 18 ]
initial
begin
	DATA_IN[18] = 1'b1;
end 
// DATA_IN[ 17 ]
initial
begin
	DATA_IN[17] = 1'b0;
end 
// DATA_IN[ 16 ]
initial
begin
	DATA_IN[16] = 1'b1;
end 
// DATA_IN[ 15 ]
initial
begin
	DATA_IN[15] = 1'b1;
end 
// DATA_IN[ 14 ]
initial
begin
	DATA_IN[14] = 1'b1;
end 
// DATA_IN[ 13 ]
initial
begin
	DATA_IN[13] = 1'b1;
end 
// DATA_IN[ 12 ]
initial
begin
	DATA_IN[12] = 1'b1;
end 
// DATA_IN[ 11 ]
initial
begin
	DATA_IN[11] = 1'b0;
end 
// DATA_IN[ 10 ]
initial
begin
	DATA_IN[10] = 1'b0;
end 
// DATA_IN[ 9 ]
initial
begin
	DATA_IN[9] = 1'b0;
end 
// DATA_IN[ 8 ]
initial
begin
	DATA_IN[8] = 1'b0;
end 
// DATA_IN[ 7 ]
initial
begin
	DATA_IN[7] = 1'b0;
end 
// DATA_IN[ 6 ]
initial
begin
	DATA_IN[6] = 1'b0;
end 
// DATA_IN[ 5 ]
initial
begin
	DATA_IN[5] = 1'b0;
end 
// DATA_IN[ 4 ]
initial
begin
	DATA_IN[4] = 1'b0;
end 
// DATA_IN[ 3 ]
initial
begin
	DATA_IN[3] = 1'b1;
end 
// DATA_IN[ 2 ]
initial
begin
	DATA_IN[2] = 1'b1;
end 
// DATA_IN[ 1 ]
initial
begin
	DATA_IN[1] = 1'b1;
end 
// DATA_IN[ 0 ]
initial
begin
	DATA_IN[0] = 1'b1;
end 

// LOAD
initial
begin
	LOAD = 1'b1;
	LOAD = #10000 1'b0;
end 
// MIR[ 35 ]
initial
begin
	MIR[35] = 1'b0;
end 
// MIR[ 34 ]
initial
begin
	MIR[34] = 1'b0;
end 
// MIR[ 33 ]
initial
begin
	MIR[33] = 1'b0;
end 
// MIR[ 32 ]
initial
begin
	MIR[32] = 1'b0;
end 
// MIR[ 31 ]
initial
begin
	MIR[31] = 1'b0;
end 
// MIR[ 30 ]
initial
begin
	MIR[30] = 1'b0;
end 
// MIR[ 29 ]
initial
begin
	MIR[29] = 1'b0;
end 
// MIR[ 28 ]
initial
begin
	MIR[28] = 1'b0;
end 
// MIR[ 27 ]
initial
begin
	MIR[27] = 1'b0;
end 
// MIR[ 26 ]
initial
begin
	MIR[26] = 1'b0;
end 
// MIR[ 25 ]
initial
begin
	MIR[25] = 1'b0;
end 
// MIR[ 24 ]
initial
begin
	MIR[24] = 1'b0;
end 
// MIR[ 23 ]
initial
begin
	MIR[23] = 1'b0;
end 
// MIR[ 22 ]
initial
begin
	MIR[22] = 1'b0;
end 
// MIR[ 21 ]
initial
begin
	MIR[21] = 1'b0;
end 
// MIR[ 20 ]
initial
begin
	MIR[20] = 1'b0;
end 
// MIR[ 19 ]
initial
begin
	MIR[19] = 1'b0;
end 
// MIR[ 18 ]
initial
begin
	MIR[18] = 1'b0;
end 
// MIR[ 17 ]
initial
begin
	MIR[17] = 1'b0;
end 
// MIR[ 16 ]
initial
begin
	MIR[16] = 1'b0;
end 
// MIR[ 15 ]
initial
begin
	MIR[15] = 1'b0;
end 
// MIR[ 14 ]
initial
begin
	MIR[14] = 1'b0;
end 
// MIR[ 13 ]
initial
begin
	MIR[13] = 1'b0;
end 
// MIR[ 12 ]
initial
begin
	MIR[12] = 1'b0;
end 
// MIR[ 11 ]
initial
begin
	MIR[11] = 1'b0;
end 
// MIR[ 10 ]
initial
begin
	MIR[10] = 1'b0;
end 
// MIR[ 9 ]
initial
begin
	MIR[9] = 1'b0;
end 
// MIR[ 8 ]
initial
begin
	MIR[8] = 1'b0;
	MIR[8] = #320000 1'b1;
	MIR[8] = #80000 1'b0;
end 
// MIR[ 7 ]
initial
begin
	MIR[7] = 1'b0;
end 
// MIR[ 6 ]
initial
begin
	MIR[6] = 1'b0;
	MIR[6] = #400000 1'b1;
	MIR[6] = #80000 1'b0;
end 
// MIR[ 5 ]
initial
begin
	MIR[5] = 1'b0;
	MIR[5] = #80000 1'b1;
	MIR[5] = #80000 1'b0;
end 
// MIR[ 4 ]
initial
begin
	MIR[4] = 1'b0;
end 
// MIR[ 3 ]
initial
begin
	MIR[3] = 1'b0;
	MIR[3] = #80000 1'b1;
	MIR[3] = #160000 1'b0;
end 
// MIR[ 2 ]
initial
begin
	MIR[2] = 1'b0;
	MIR[2] = #80000 1'b1;
	MIR[2] = #160000 1'b0;
end 
// MIR[ 1 ]
initial
begin
	MIR[1] = 1'b0;
	MIR[1] = #80000 1'b1;
	MIR[1] = #160000 1'b0;
end 
// MIR[ 0 ]
initial
begin
	MIR[0] = 1'b0;
	MIR[0] = #80000 1'b1;
	MIR[0] = #160000 1'b0;
	MIR[0] = #240000 1'b1;
end 

MDR_vlg_sample_tst tb_sample (
	.CLOCK(CLOCK),
	.DATA_IN(DATA_IN),
	.IN_C(IN_C),
	.LOAD(LOAD),
	.MIR(MIR),
	.sampler_tx(sampler)
);

MDR_vlg_check_tst tb_out(
	.DATA_OUT(DATA_OUT),
	.OUT_B(OUT_B),
	.sampler_rx(sampler)
);
endmodule

