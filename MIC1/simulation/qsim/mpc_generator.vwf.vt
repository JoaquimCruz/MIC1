// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/21/2024 21:46:32"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MPC_GENERATOR
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MPC_GENERATOR_vlg_sample_tst(
	CLOCK,
	JAM,
	MBR_IN,
	N,
	NEXT_ADDRESS,
	Z,
	sampler_tx
);
input  CLOCK;
input [2:0] JAM;
input [7:0] MBR_IN;
input  N;
input [8:0] NEXT_ADDRESS;
input  Z;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK or JAM or MBR_IN or N or NEXT_ADDRESS or Z)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MPC_GENERATOR_vlg_check_tst (
	MPC,
	sampler_rx
);
input [8:0] MPC;
input sampler_rx;

reg [8:0] MPC_expected;

reg [8:0] MPC_prev;

reg [8:0] MPC_expected_prev;

reg [8:0] last_MPC_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	MPC_prev = MPC;
end

// update expected /o prevs

always @(trigger)
begin
	MPC_expected_prev = MPC_expected;
end


// expected MPC[ 8 ]
initial
begin
	MPC_expected[8] = 1'b0;
	MPC_expected[8] = #409971 1'b1;
	MPC_expected[8] = #200000 1'b0;
	MPC_expected[8] = #97820 1'b1;
	MPC_expected[8] = #103041 1'b0;
	MPC_expected[8] = #96837 1'b1;
	MPC_expected[8] = #102253 1'b0;
end 
// expected MPC[ 7 ]
initial
begin
	MPC_expected[7] = 1'b0;
	MPC_expected[7] = #209883 1'b1;
	MPC_expected[7] = #400000 1'b0;
end 
// expected MPC[ 6 ]
initial
begin
	MPC_expected[6] = 1'b0;
end 
// expected MPC[ 5 ]
initial
begin
	MPC_expected[5] = 1'b0;
	MPC_expected[5] = #209609 1'b1;
	MPC_expected[5] = #400000 1'b0;
end 
// expected MPC[ 4 ]
initial
begin
	MPC_expected[4] = 1'b0;
end 
// expected MPC[ 3 ]
initial
begin
	MPC_expected[3] = 1'b0;
end 
// expected MPC[ 2 ]
initial
begin
	MPC_expected[2] = 1'b0;
	MPC_expected[2] = #210244 1'b1;
	MPC_expected[2] = #400000 1'b0;
	MPC_expected[2] = #200104 1'b1;
end 
// expected MPC[ 1 ]
initial
begin
	MPC_expected[1] = 1'b0;
	MPC_expected[1] = #610627 1'b1;
	MPC_expected[1] = #200000 1'b0;
	MPC_expected[1] = #400000 1'b1;
end 
// expected MPC[ 0 ]
initial
begin
	MPC_expected[0] = 1'b0;
	MPC_expected[0] = #209777 1'b1;
	MPC_expected[0] = #599826 1'b0;
	MPC_expected[0] = #199000 1'b1;
	MPC_expected[0] = #201000 1'b0;
end 
// generate trigger
always @(MPC_expected or MPC)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected MPC = %b | ",MPC_expected_prev);
	$display("| real MPC = %b | ",MPC_prev);
`endif
	if (
		( MPC_expected_prev[0] !== 1'bx ) && ( MPC_prev[0] !== MPC_expected_prev[0] )
		&& ((MPC_expected_prev[0] !== last_MPC_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MPC_exp[0] = MPC_expected_prev[0];
	end
	if (
		( MPC_expected_prev[1] !== 1'bx ) && ( MPC_prev[1] !== MPC_expected_prev[1] )
		&& ((MPC_expected_prev[1] !== last_MPC_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MPC_exp[1] = MPC_expected_prev[1];
	end
	if (
		( MPC_expected_prev[2] !== 1'bx ) && ( MPC_prev[2] !== MPC_expected_prev[2] )
		&& ((MPC_expected_prev[2] !== last_MPC_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MPC_exp[2] = MPC_expected_prev[2];
	end
	if (
		( MPC_expected_prev[3] !== 1'bx ) && ( MPC_prev[3] !== MPC_expected_prev[3] )
		&& ((MPC_expected_prev[3] !== last_MPC_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MPC_exp[3] = MPC_expected_prev[3];
	end
	if (
		( MPC_expected_prev[4] !== 1'bx ) && ( MPC_prev[4] !== MPC_expected_prev[4] )
		&& ((MPC_expected_prev[4] !== last_MPC_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MPC_exp[4] = MPC_expected_prev[4];
	end
	if (
		( MPC_expected_prev[5] !== 1'bx ) && ( MPC_prev[5] !== MPC_expected_prev[5] )
		&& ((MPC_expected_prev[5] !== last_MPC_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MPC_exp[5] = MPC_expected_prev[5];
	end
	if (
		( MPC_expected_prev[6] !== 1'bx ) && ( MPC_prev[6] !== MPC_expected_prev[6] )
		&& ((MPC_expected_prev[6] !== last_MPC_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MPC_exp[6] = MPC_expected_prev[6];
	end
	if (
		( MPC_expected_prev[7] !== 1'bx ) && ( MPC_prev[7] !== MPC_expected_prev[7] )
		&& ((MPC_expected_prev[7] !== last_MPC_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MPC_exp[7] = MPC_expected_prev[7];
	end
	if (
		( MPC_expected_prev[8] !== 1'bx ) && ( MPC_prev[8] !== MPC_expected_prev[8] )
		&& ((MPC_expected_prev[8] !== last_MPC_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MPC_exp[8] = MPC_expected_prev[8];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1400000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module MPC_GENERATOR_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg [2:0] JAM;
reg [7:0] MBR_IN;
reg N;
reg [8:0] NEXT_ADDRESS;
reg Z;
// wires                                               
wire [8:0] MPC;

wire sampler;                             

// assign statements (if any)                          
MPC_GENERATOR i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK(CLOCK),
	.JAM(JAM),
	.MBR_IN(MBR_IN),
	.MPC(MPC),
	.N(N),
	.NEXT_ADDRESS(NEXT_ADDRESS),
	.Z(Z)
);

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #100000 1'b1;
	#100000;
end 
// JAM[ 2 ]
initial
begin
	JAM[2] = 1'b0;
	JAM[2] = #200000 1'b1;
	JAM[2] = #400000 1'b0;
end 
// JAM[ 1 ]
initial
begin
	JAM[1] = 1'b0;
	JAM[1] = #600000 1'b1;
	JAM[1] = #200000 1'b0;
end 
// JAM[ 0 ]
initial
begin
	JAM[0] = 1'b0;
	JAM[0] = #800000 1'b1;
	JAM[0] = #199000 1'b0;
end 
// NEXT_ADDRESS[ 8 ]
initial
begin
	NEXT_ADDRESS[8] = 1'b0;
	NEXT_ADDRESS[8] = #400000 1'b1;
	NEXT_ADDRESS[8] = #200000 1'b0;
end 
// NEXT_ADDRESS[ 7 ]
initial
begin
	NEXT_ADDRESS[7] = 1'b0;
end 
// NEXT_ADDRESS[ 6 ]
initial
begin
	NEXT_ADDRESS[6] = 1'b0;
end 
// NEXT_ADDRESS[ 5 ]
initial
begin
	NEXT_ADDRESS[5] = 1'b0;
end 
// NEXT_ADDRESS[ 4 ]
initial
begin
	NEXT_ADDRESS[4] = 1'b0;
end 
// NEXT_ADDRESS[ 3 ]
initial
begin
	NEXT_ADDRESS[3] = 1'b0;
end 
// NEXT_ADDRESS[ 2 ]
initial
begin
	NEXT_ADDRESS[2] = 1'b0;
	NEXT_ADDRESS[2] = #800000 1'b1;
end 
// NEXT_ADDRESS[ 1 ]
initial
begin
	NEXT_ADDRESS[1] = 1'b0;
	NEXT_ADDRESS[1] = #600000 1'b1;
	NEXT_ADDRESS[1] = #200000 1'b0;
	NEXT_ADDRESS[1] = #400000 1'b1;
end 
// NEXT_ADDRESS[ 0 ]
initial
begin
	NEXT_ADDRESS[0] = 1'b0;
	NEXT_ADDRESS[0] = #600000 1'b1;
	NEXT_ADDRESS[0] = #200000 1'b0;
	NEXT_ADDRESS[0] = #199000 1'b1;
	NEXT_ADDRESS[0] = #201000 1'b0;
end 
// MBR_IN[ 7 ]
initial
begin
	MBR_IN[7] = 1'b1;
end 
// MBR_IN[ 6 ]
initial
begin
	MBR_IN[6] = 1'b0;
end 
// MBR_IN[ 5 ]
initial
begin
	MBR_IN[5] = 1'b1;
end 
// MBR_IN[ 4 ]
initial
begin
	MBR_IN[4] = 1'b0;
end 
// MBR_IN[ 3 ]
initial
begin
	MBR_IN[3] = 1'b0;
end 
// MBR_IN[ 2 ]
initial
begin
	MBR_IN[2] = 1'b1;
end 
// MBR_IN[ 1 ]
initial
begin
	MBR_IN[1] = 1'b0;
end 
// MBR_IN[ 0 ]
initial
begin
	MBR_IN[0] = 1'b1;
end 

// N
initial
begin
	N = 1'b0;
	N = #680000 1'b1;
	N = #20000 1'b0;
	N = #380000 1'b1;
	N = #20000 1'b0;
end 

// Z
initial
begin
	Z = 1'b0;
	Z = #880000 1'b1;
	Z = #20000 1'b0;
	Z = #380000 1'b1;
	Z = #20000 1'b0;
end 

MPC_GENERATOR_vlg_sample_tst tb_sample (
	.CLOCK(CLOCK),
	.JAM(JAM),
	.MBR_IN(MBR_IN),
	.N(N),
	.NEXT_ADDRESS(NEXT_ADDRESS),
	.Z(Z),
	.sampler_tx(sampler)
);

MPC_GENERATOR_vlg_check_tst tb_out(
	.MPC(MPC),
	.sampler_rx(sampler)
);
endmodule

